// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(cuid())
  name       String?
  email      String       @unique
  password   String
  Workspaces Workspaces[]
  Members    Members[]
  Channels   Channels[]
  Messages   Messages[]
}

model Workspaces {
  id       String @id @default(uuid())
  name     String
  joinCode Int    @unique
  userId   String
  user     User   @relation(fields: [userId], references: [id])

  Members Members[]

  time Int

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Channels     Channels[]
  Messages     Messages[]
  Conversation Conversation[]
  Reactions    Reactions[]
}

model Channels {
  id   String @id @default(uuid())
  name String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  workspaceId String
  workspace   Workspaces @relation(fields: [workspaceId], references: [id])
  Messages    Messages[]
}

model Members {
  id          Int        @id @default(autoincrement())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  workspaceId String
  workspace   Workspaces @relation(fields: [workspaceId], references: [id])

  role            MemberRole
  Messages        Messages[]
  Conversation    Conversation[] @relation(name: "memberOne")
  ConversationTwo Conversation[] @relation(name: "memberTwo")
  Reactions       Reactions[]
}

model Messages {
  id              String     @id @default(cuid())
  body            String
  senderName      String
  image           String?
  memberId        Int?
  member          Members?    @relation(fields: [memberId], references: [id], onDelete: SetNull)
  workspaceId     String
  workspace       Workspaces @relation(fields: [workspaceId], references: [id])
  channelId       String?
  channel         Channels?  @relation(fields: [channelId], references: [id])
  parentMessageId String?
  parentMessage   Messages?  @relation(name: "parentMessage", fields: [parentMessageId], references: [id], onDelete: SetNull)

  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  time Int

  updatedAt DateTime    @updatedAt
  Messages  Messages[]  @relation(name: "parentMessage")
  Reactions Reactions[]
}

model Conversation {
  id          String     @id @default(cuid())
  workspaceId String
  workspace   Workspaces @relation(fields: [workspaceId], references: [id])

  memberOneId Int?
  member      Members? @relation(name: "memberOne", fields: [memberOneId], references: [id], onDelete: SetNull)

  memberTwoId Int?
  memberTwo   Members? @relation(name: "memberTwo", fields: [memberTwoId], references: [id], onDelete: SetNull)

  Messages Messages[]
}

model Reactions {
  id    Int    @id @default(autoincrement())
  value String

  workspaceId String
  workspace   Workspaces @relation(fields: [workspaceId], references: [id])

  messageId String
  message   Messages @relation(fields: [messageId], references: [id])

  memberId Int
  member   Members @relation(fields: [memberId], references: [id])
}

enum MemberRole {
  admin
  member
}
